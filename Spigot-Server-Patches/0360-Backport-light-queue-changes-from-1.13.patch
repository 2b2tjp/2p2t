From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 23 Sep 2018 20:44:52 -0400
Subject: [PATCH] Backport light queue changes from 1.13


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 0a3f00c3b9a1af6e4b7f806215d756006c19dea2..4f88db79a694f5c956ed91f675d93441345dca17 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -274,14 +274,7 @@ public class Chunk {
 
     private void h(boolean flag) {
         this.world.methodProfiler.a("recheckGaps");
-        if (this.world.areChunksLoaded(new BlockPosition(this.locX * 16 + 8, 0, this.locZ * 16 + 8), 16)) {
-            this.runOrQueueLightUpdate(() -> recheckGaps(flag)); // Paper - Queue light update
-        }
-    }
-
-    private void recheckGaps(boolean flag) {
-        if (true) {
-            // Paper end
+        if (this.areNeighborsLoaded(1)) { // Paper
             for (int i = 0; i < 16; ++i) {
                 for (int j = 0; j < 16; ++j) {
                     if (this.i[i + j * 16]) {
@@ -332,7 +325,7 @@ public class Chunk {
     }
 
     private void a(int i, int j, int k, int l) {
-        if (l > k && this.world.areChunksLoaded(new BlockPosition(i, 0, j), 16)) {
+        if (l > k && this.areNeighborsLoaded(1)) { // Paper
             for (int i1 = k; i1 < l; ++i1) {
                 this.world.c(EnumSkyBlock.SKY, new BlockPosition(i, i1, j));
             }
diff --git a/src/main/java/net/minecraft/server/PaperLightingQueue.java b/src/main/java/net/minecraft/server/PaperLightingQueue.java
index 345cd5824047f329ddcbcf5ddf54a570bdedc761..f1c013116fc05b7abe7184eae01b715c02c7a058 100644
--- a/src/main/java/net/minecraft/server/PaperLightingQueue.java
+++ b/src/main/java/net/minecraft/server/PaperLightingQueue.java
@@ -6,16 +6,16 @@ import it.unimi.dsi.fastutil.objects.ObjectCollection;
 import java.util.ArrayDeque;
 
 class PaperLightingQueue {
-    private static final long MAX_TIME = (long) (1000000000 / 20 * .95);
-    private static int updatesThisTick;
-
+    private static final long MAX_TIME = (long) (1000000000 / 20 * 1.15);
 
     static void processQueue(long curTime) {
-        updatesThisTick = 0;
-
         final long startTime = System.nanoTime();
         final long maxTickTime = MAX_TIME - (startTime - curTime);
 
+        if (maxTickTime <= 0) {
+            return;
+        }
+
         START:
         for (World world : MinecraftServer.getServer().worlds) {
             if (!world.paperConfig.queueLightUpdates) {
@@ -23,7 +23,7 @@ class PaperLightingQueue {
             }
 
             ObjectCollection<Chunk> loadedChunks = ((WorldServer) world).getChunkProviderServer().chunks.values();
-            for (Chunk chunk : loadedChunks.toArray(new Chunk[loadedChunks.size()])) {
+            for (Chunk chunk : loadedChunks.toArray(new Chunk[0])) {
                 if (chunk.lightingQueue.processQueue(startTime, maxTickTime)) {
                     break START;
                 }
@@ -50,14 +50,15 @@ class PaperLightingQueue {
             if (this.isEmpty()) {
                 return false;
             }
+            if (isOutOfTime(maxTickTime, startTime)) {
+                return true;
+            }
             try (Timing ignored = chunk.world.timings.lightingQueueTimer.startTiming()) {
                 Runnable lightUpdate;
                 while ((lightUpdate = this.poll()) != null) {
                     lightUpdate.run();
-                    if (startTime > 0 && ++PaperLightingQueue.updatesThisTick % 10 == 0 && PaperLightingQueue.updatesThisTick > 10) {
-                        if (System.nanoTime() - startTime > maxTickTime) {
-                            return true;
-                        }
+                    if (isOutOfTime(maxTickTime, startTime)) {
+                        return true;
                     }
                 }
             }
@@ -74,7 +75,7 @@ class PaperLightingQueue {
             }
             processQueue(0, 0); // No timeout
 
-            final int radius = 1; // TODO: bitflip, why should this ever be 2?
+            final int radius = 1;
             for (int x = chunk.locX - radius; x <= chunk.locX + radius; ++x) {
                 for (int z = chunk.locZ - radius; z <= chunk.locZ + radius; ++z) {
                     if (x == chunk.locX && z == chunk.locZ) {
@@ -89,4 +90,8 @@ class PaperLightingQueue {
             }
         }
     }
+
+    private static boolean isOutOfTime(long maxTickTime, long startTime) {
+        return startTime > 0 && System.nanoTime() - startTime > maxTickTime;
+    }
 }
