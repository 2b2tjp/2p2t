From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 14 Apr 2016 21:01:39 -0400
Subject: [PATCH] Fix Bugs with Spigot Mob Spawn Logic

Spigot drastically altered vanilla mob spawn logic and caused a few issues.
1) Used only spawnable chunks vs entire world for entity counting, resulting in ignoring
other entities in the world, and causing the world to go over its intended limit.

Specially with servers using smaller mob spawn ranges than view distance, as well as affects spawning API

2) Spigot was using 16x16 division instead of vanilla 17x17 division.

This patch returns mob counting to use all loaded chunks, and 17x17 division.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index bfa68f131768143a0bfddd9e75b9e1197b60538b..dcdb2361e55eb970410149f4c1b016fd9ff2dca7 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -714,8 +714,8 @@ public class Chunk {
             i = this.entitySlices.length - 1;
         }
 
-        this.entitySlices[i].remove(entity);
         // Paper start
+        if (!this.entitySlices[i].remove(entity)) { return; }
         entity.setCurrentChunk(null);
         entityCounts.decrement(entity.getMinecraftKeyString());
         if (entity instanceof EntityItem) {
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index 45a83ae995d4bc558a297c6dd421ccc20817bd76..ed22607d911372ac49d2535576f77bee670c6be6 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -23,6 +23,15 @@ public final class SpawnerCreature {
     // Spigot start - get entity count only from chunks being processed in b
     private int getEntityCount(WorldServer server, Class oClass)
     {
+        // Paper start - use entire world, not just active chunks. Spigot broke vanilla expectations.
+        if (true) {
+            int sum = 0;
+            for (Chunk c : server.getChunkProviderServer().chunks.values()) {
+                sum += c.entityCount.get(oClass);
+            }
+            return sum;
+        }
+        // Paper end
         int i = 0;
         Iterator<Long> it = this.b.iterator();
         while ( it.hasNext() )
@@ -126,7 +135,7 @@ public final class SpawnerCreature {
                     int l1 = limit * i / a; // CraftBukkit - use per-world limits
                     */ // Paper end
 
-                    if ((mobcnt = getEntityCount(worldserver, enumcreaturetype.a())) <= limit * i / 256) {
+                    if ((mobcnt = getEntityCount(worldserver, enumcreaturetype.a())) <= limit * i / 289) { // Paper - use 17x17 like vanilla (a at top of file)
                         BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
                         Iterator iterator1 = this.b.iterator();
 
