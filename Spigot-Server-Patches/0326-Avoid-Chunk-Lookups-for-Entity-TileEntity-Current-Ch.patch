From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 4 Jul 2018 03:39:51 -0400
Subject: [PATCH] Avoid Chunk Lookups for Entity/TileEntity Current Chunk

In many places where we simply want the current chunk the entity
is in, instead of doing a hashmap lookup for it, we now have access
to the object directly on the Entity/TileEntity object we can directly grab.

Use that local value instead to reduce lookups in many hot places.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 57addecaedb22ac76939067bf8e14d99c7dc75dd..0c811805946a3335e27b4c7f74d27e7be0faafca 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -702,6 +702,7 @@ public class Chunk {
         // Spigot end
     }
 
+    public void removeEntity(Entity entity) { b(entity); } // Paper - OBFHELPER
     public void b(Entity entity) {
         this.a(entity, entity.ac);
     }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 7a22a6853874e59a0fbab0f8a82877f33a5eb2ac..d96126bcf2e3f715f264a8e56688ed79a90521ca 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1513,12 +1513,15 @@ public abstract class World implements IBlockAccess {
         int j;
         // Paper start - Set based removal lists
         for (Entity e : this.f) {
+            /*
             j = e.getChunkZ();
             int k = e.getChunkX();
 
             if (e.isAddedToChunk() && this.isChunkLoaded(k, j, true)) {
                 this.getChunkAt(k, j).b(e);
-            }
+            }*/
+            Chunk chunk = e.isAddedToChunk() ? e.getCurrentChunk() : null;
+            if (chunk != null) chunk.removeEntity(e);
         }
 
         for (Entity e : this.f) {
@@ -1579,12 +1582,17 @@ public abstract class World implements IBlockAccess {
             this.methodProfiler.b();
             this.methodProfiler.a("remove");
             if (entity.dead) {
+                // Paper start
+                /*
                 j = entity.ab;
                 int l = entity.ad;
 
-                if (entity.aa && this.isChunkLoaded(j, l, true)) {
+                /*if (entity.aa && this.isChunkLoaded(j, l, true)) {
                     this.getChunkAt(j, l).b(entity);
-                }
+                }*/
+                Chunk chunk = entity.isAddedToChunk() ? entity.getCurrentChunk() : null;
+                if (chunk != null) chunk.removeEntity(entity);
+                // Paper end
 
                 guardEntityList = false; // Spigot
                 this.entityList.remove(this.tickPosition--); // CraftBukkit - Use field for loop variable
@@ -1629,7 +1637,7 @@ public abstract class World implements IBlockAccess {
                 BlockPosition blockposition = tileentity.getPosition();
 
                 // Paper start - Skip ticking in chunks scheduled for unload
-                net.minecraft.server.Chunk chunk = this.getChunkIfLoaded(blockposition);
+                net.minecraft.server.Chunk chunk = tileentity.getCurrentChunk();
                 boolean shouldTick = chunk != null;
                 if(this.paperConfig.skipEntityTickingInChunksScheduledForUnload)
                     shouldTick = shouldTick && !chunk.isUnloading() && chunk.scheduledForUnload == null;
@@ -1665,8 +1673,11 @@ public abstract class World implements IBlockAccess {
                 tilesThisCycle--;
                 this.tileEntityListTick.remove(tileTickPosition--);
                 //this.tileEntityList.remove(tileentity); // Paper - remove unused list
-                if (this.isLoaded(tileentity.getPosition())) {
-                    this.getChunkAtWorldCoords(tileentity.getPosition()).d(tileentity.getPosition());
+                // Paper start
+                net.minecraft.server.Chunk chunk = tileentity.getCurrentChunk();
+                if (chunk != null) {
+                    chunk.removeTileEntity(tileentity.getPosition());
+                    // Paper end
                 }
             }
         }
