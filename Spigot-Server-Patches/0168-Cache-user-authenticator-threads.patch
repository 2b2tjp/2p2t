From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: vemacs <d@nkmem.es>
Date: Wed, 23 Nov 2016 08:31:45 -0500
Subject: [PATCH] Cache user authenticator threads


diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index 2619adde2b732cd4adcee038f7e1d98e56a6ae13..8d1555a21943f329433254f5430e72b55060b8ef 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -96,6 +96,12 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 
     }
 
+    // Paper start - Cache authenticator threads
+    private static final AtomicInteger threadId = new AtomicInteger(0);
+    private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(
+            r -> new Thread(r, "User Authenticator #" + threadId.incrementAndGet())
+    );
+    // Paper end
     // Spigot start
     public void initUUID()
     {
@@ -178,8 +184,8 @@ public class LoginListener implements PacketLoginInListener, ITickable {
             this.networkManager.sendPacket(new PacketLoginOutEncryptionBegin("", this.server.O().getPublic(), this.e));
         } else {
             // Spigot start
-            new Thread("User Authenticator #" + LoginListener.b.incrementAndGet()) {
-
+            // Paper start - Cache authenticator threads
+            authenticatorPool.execute(new Runnable() {
                 @Override
                 public void run() {
                     try {
@@ -190,7 +196,8 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                         server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + i.getName(), ex);
                     }
                 }
-            }.start();
+            });
+            // Paper end
             // Spigot end
         }
 
@@ -206,7 +213,8 @@ public class LoginListener implements PacketLoginInListener, ITickable {
             this.loginKey = packetlogininencryptionbegin.a(privatekey);
             this.g = LoginListener.EnumProtocolState.AUTHENTICATING;
             this.networkManager.a(this.loginKey);
-            (new Thread("User Authenticator #" + LoginListener.b.incrementAndGet()) {
+            // Paper start - Cache authenticator threads
+            authenticatorPool.execute(new Runnable() {
                 public void run() {
                     GameProfile gameprofile = LoginListener.this.i;
 
@@ -253,7 +261,8 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 
                     return LoginListener.this.server.ac() && socketaddress instanceof InetSocketAddress ? ((InetSocketAddress) socketaddress).getAddress() : null;
                 }
-            }).start();
+            });
+            // Paper end
         }
     }
 
