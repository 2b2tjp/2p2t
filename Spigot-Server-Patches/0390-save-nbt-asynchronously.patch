From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <ilyy@outlook.jp>
Date: Sun, 31 Jan 2021 04:02:45 +0900
Subject: [PATCH] save nbt asynchronously


diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index 50056f49a8eaea687d00175e41a877040934e9ae..0213207100c042cf0acd339569c8cb10a0029618 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -11,6 +11,7 @@ import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.util.ConcurrentModificationException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -88,8 +89,15 @@ public class PersistentCollection {
 
     }
 
+    private static final java.util.concurrent.ExecutorService SAVE_EXECUTOR = java.util.concurrent.Executors.newFixedThreadPool(xyz.acrylicstyle.paper.The2b2tConfig.maxDataSaveThreads); // 2p2t
     private void a(PersistentBase persistentbase) {
+        // 2p2t start
+        a(persistentbase, new java.util.concurrent.atomic.AtomicInteger());
+    }
+    private void a(PersistentBase persistentbase, java.util.concurrent.atomic.AtomicInteger tries) {
+        // 2p2t end
         if (this.b != null) {
+            SAVE_EXECUTOR.submit(() -> { // 2p2t
             try {
                 File file = this.b.getDataFile(persistentbase.id);
 
@@ -102,10 +110,20 @@ public class PersistentCollection {
                     NBTCompressedStreamTools.a(nbttagcompound, (OutputStream) fileoutputstream);
                     fileoutputstream.close();
                 }
+                // 2p2t start
+            } catch (ConcurrentModificationException ex) {
+                if (tries.incrementAndGet() > 5) {
+                    ex.printStackTrace();
+                    ServerInternalException.reportInternalException(ex);
+                } else {
+                    a(persistentbase, tries);
+                }
+                // 2p2t end
             } catch (Exception exception) {
                 exception.printStackTrace();
                 ServerInternalException.reportInternalException(exception); // Paper
             }
+            }); // 2p2t
 
         }
     }
diff --git a/src/main/java/xyz/acrylicstyle/paper/The2b2tConfig.java b/src/main/java/xyz/acrylicstyle/paper/The2b2tConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..767404d10452313474ff10ee67222d427578f75f
--- /dev/null
+++ b/src/main/java/xyz/acrylicstyle/paper/The2b2tConfig.java
@@ -0,0 +1,118 @@
+package xyz.acrylicstyle.paper;
+
+import com.google.common.base.Throwables;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.logging.Level;
+
+public class The2b2tConfig {
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for 2p2t.\n"
+        + "As you can see, there's tons to configure. Some options may impact gameplay or performance,\n"
+        + "so use with caution, and make sure you know what each option does before configuring.\n";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    static int version;
+    private static boolean verbose;
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load 2p2t.yml, please correct your syntax errors", ex);
+            Throwables.throwIfUnchecked(ex);
+            throw new RuntimeException(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        version = getInt("config-version", 13);
+        set("config-version", 13);
+        readConfig(The2b2tConfig.class, null);
+    }
+
+    protected static void logError(String s) {
+        Bukkit.getLogger().severe(s);
+    }
+
+    protected static void log(String s) {
+        Bukkit.getLogger().info(s);
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble(path, (double) def);
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    public static int maxDataSaveThreads = 8;
+    private static void maxDataSaveThreads() {
+        maxDataSaveThreads = getInt("settings.max-data-save-threads", 8);
+        log("Max Data Save Threads: " + maxDataSaveThreads);
+    }
+}
