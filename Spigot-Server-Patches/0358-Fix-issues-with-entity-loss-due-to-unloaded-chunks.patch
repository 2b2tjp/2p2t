From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 27 Sep 2018 23:46:03 -0400
Subject: [PATCH] Fix issues with entity loss due to unloaded chunks

Vanilla has risk of losing entities by causing them to be
removed from all chunks if they try to move into an unloaded chunk.

This pretty much means high chance this entity will be lost in this scenario.

There is another case that adding an enttiy to the world can fail if
the chunk isn't loaded.

Lots of the server is designed around addEntity never expecting to fail for these reasons,
nor is it really logical.

This change ensures the chunks are always loaded when entities are
added to the world, or a valid entity moves between chunks.

diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 64d75934bcdd73d1879e84a5d52bcef7e93cff18..bcbdadbd3a3721bcaaf052d3d084351c28db674a 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1181,7 +1181,7 @@ public abstract class World implements IBlockAccess {
 
         int i = MathHelper.floor(entity.locX / 16.0D);
         int j = MathHelper.floor(entity.locZ / 16.0D);
-        boolean flag = entity.attachedToPlayer;
+        boolean flag = true; // Paper - always load chunks
 
         // Paper start - Set origin location when the entity is being added to the world
         if (entity.origin == null) {
@@ -1826,7 +1826,7 @@ public abstract class World implements IBlockAccess {
                 this.getChunkAt(entity.ab, entity.ad).a(entity, entity.ac);
             }
 
-            if (!entity.bD() && !this.isChunkLoaded(i, k, true)) {
+            if (!entity.valid && !entity.bD() && !this.isChunkLoaded(i, k, true)) { // Paper - always load to new chunk if valid
                 entity.aa = false;
             } else {
                 this.getChunkAt(i, k).a(entity);
